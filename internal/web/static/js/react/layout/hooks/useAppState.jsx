// Â∫îÁî®Áä∂ÊÄÅÁÆ°ÁêÜHook
import { useState, useEffect, createContext, useContext } from 'react';

// Â∫îÁî®Áä∂ÊÄÅ‰∏ä‰∏ãÊñá
const AppStateContext = createContext();

// Â∫îÁî®Áä∂ÊÄÅÊèê‰æõËÄÖÁªÑ‰ª∂
export const AppStateProvider = ({ children }) => {
    const [activeTab, setActiveTab] = useState('overview');
    const [connectionStatus, setConnectionStatus] = useState('disconnected');
    const [notifications, setNotifications] = useState([]);
    const [sseConnection, setSseConnection] = useState(null);

    // ÂàáÊç¢Ê†áÁ≠æÈ°µ
    const switchTab = (tabName) => {
        setActiveTab(tabName);
        console.log(`üìã [Â∏ÉÂ±Ä] ÂàáÊç¢Âà∞Ê†áÁ≠æÈ°µ: ${tabName}`);
    };

    // Ê∑ªÂä†ÈÄöÁü•
    const addNotification = (notification) => {
        const id = Date.now();
        const newNotification = { ...notification, id };
        setNotifications(prev => [...prev, newNotification]);

        // 5ÁßíÂêéËá™Âä®ÁßªÈô§ÈÄöÁü•
        setTimeout(() => {
            removeNotification(id);
        }, 5000);
    };

    // ÁßªÈô§ÈÄöÁü•
    const removeNotification = (id) => {
        setNotifications(prev => prev.filter(n => n.id !== id));
    };

    // Êõ¥Êñ∞ËøûÊé•Áä∂ÊÄÅ
    const updateConnectionStatus = (status) => {
        if (status !== connectionStatus) {
            setConnectionStatus(status);
            console.log(`üì° [ËøûÊé•Áä∂ÊÄÅ] ${status}`);
        }
    };

    // SSEËøûÊé•ÁÆ°ÁêÜ
    useEffect(() => {
        // ËøôÈáåÂèØ‰ª•ÂàùÂßãÂåñSSEËøûÊé•
        console.log('üöÄ [Â∫îÁî®Áä∂ÊÄÅ] ÂàùÂßãÂåñÂ∫îÁî®Áä∂ÊÄÅÁÆ°ÁêÜ');

        return () => {
            if (sseConnection) {
                sseConnection.close();
            }
        };
    }, []);

    const value = {
        // Áä∂ÊÄÅ
        activeTab,
        connectionStatus,
        notifications,
        sseConnection,

        // ÊñπÊ≥ï
        switchTab,
        addNotification,
        removeNotification,
        updateConnectionStatus,
        setSseConnection
    };

    return (
        <AppStateContext.Provider value={value}>
            {children}
        </AppStateContext.Provider>
    );
};

// ‰ΩøÁî®Â∫îÁî®Áä∂ÊÄÅÁöÑHook
export const useAppState = () => {
    const context = useContext(AppStateContext);
    if (!context) {
        throw new Error('useAppState must be used within an AppStateProvider');
    }
    return context;
};

// ÂØºÂá∫ÈªòËÆ§ÂÄº
export default useAppState;